import torch
import torch.nn as nn
import torch.nn.functional as F

# Inferred from UI (available to import in main.py)
CIN = 64
H = 56
W = 56

class GeneratedBlock(nn.Module):
    def __init__(self, in_channels=64):
        super().__init__()
        self.layer_0 = nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1, groups=1, dilation=1, bias=False)
        self.layer_1 = nn.BatchNorm2d(64)
        self.layer_2 = nn.ReLU(inplace=True)
        self.layer_3 = nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1, groups=1, dilation=1, bias=False)
        self.layer_4 = nn.BatchNorm2d(64)
        self.layer_5 = nn.Identity()  # TODO: Residual Add handling in forward
        self.layer_6 = nn.ReLU(inplace=True)
        self.layer_7 = nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1, groups=1, dilation=1, bias=False)
        self.layer_8 = nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1, groups=1, dilation=1, bias=False)

    def forward(self, x):
        ys = []
        x = self.layer_0(x)
        ys.append(x)
        x = self.layer_1(x)
        ys.append(x)
        x = self.layer_2(x)
        ys.append(x)
        x = self.layer_3(x)
        ys.append(x)
        x = self.layer_4(x)
        ys.append(x)
        x = x + ys[4]  # Residual add
        ys.append(x)
        x = self.layer_6(x)
        ys.append(x)
        x = self.layer_7(x)
        ys.append(x)
        x = self.layer_8(x)
        ys.append(x)
        return x

class GeneratedModel(nn.Module):
    def __init__(self, in_channels=64):
        super().__init__()
        self.m_0 = nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1, groups=1, dilation=1, bias=False)
        self.m_1 = nn.BatchNorm2d(64)
        self.m_2 = nn.ReLU(inplace=True)
        self.m_3 = nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1, groups=1, dilation=1, bias=False)
        self.m_4 = nn.BatchNorm2d(64)
        self.m_5 = nn.Identity()
        self.m_6 = nn.ReLU(inplace=True)
        self.m_7 = nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1, groups=1, dilation=1, bias=False)
        self.m_8 = nn.BatchNorm2d(64)
        self.m_9 = nn.ReLU(inplace=True)
        self.m_10 = nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1, groups=1, dilation=1, bias=False)
        self.m_11 = nn.BatchNorm2d(64)
        self.m_12 = nn.Identity()
        self.m_13 = nn.ReLU(inplace=True)
        self.m_14 = nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1, groups=1, dilation=1, bias=False)
        self.m_15 = nn.BatchNorm2d(64)
        self.m_16 = nn.ReLU(inplace=True)
        self.m_17 = nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1, groups=1, dilation=1, bias=False)
        self.m_18 = nn.BatchNorm2d(64)
        self.m_19 = nn.Identity()
        self.m_20 = nn.ReLU(inplace=True)
        self.m_21 = nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1, groups=1, dilation=1, bias=False)
        self.m_22 = nn.BatchNorm2d(64)
        self.m_23 = nn.ReLU(inplace=True)
        self.m_24 = nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1, groups=1, dilation=1, bias=False)
        self.m_25 = nn.BatchNorm2d(64)
        self.m_26 = nn.Identity()
        self.m_27 = nn.ReLU(inplace=True)
        self.m_28 = nn.Conv2d(64, 64, kernel_size=1, stride=1, padding=0, bias=False)
        self.m_29 = nn.BatchNorm2d(64)
        self.m_30 = nn.ReLU(inplace=True)
        self.m_31 = nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1, groups=1, dilation=1, bias=False)
        self.m_32 = nn.BatchNorm2d(64)
        self.m_33 = nn.ReLU(inplace=True)
        self.m_34 = nn.Conv2d(64, 64, kernel_size=1, stride=1, padding=0, bias=False)
        self.m_35 = nn.BatchNorm2d(64)
        self.m_36 = nn.Identity()
        self.m_37 = nn.ReLU(inplace=True)
        self.m_38 = nn.Linear(64, 10)

    def forward(self, x):
        ys = []
        x = self.m_0(x)
        ys.append(x)
        x = self.m_1(x)
        ys.append(x)
        x = self.m_2(x)
        ys.append(x)
        x = self.m_3(x)
        ys.append(x)
        x = self.m_4(x)
        ys.append(x)
        x = x + ys[4]  # Residual add
        ys.append(x)
        x = self.m_6(x)
        ys.append(x)
        x = self.m_7(x)
        ys.append(x)
        x = self.m_8(x)
        ys.append(x)
        x = self.m_9(x)
        ys.append(x)
        x = self.m_10(x)
        ys.append(x)
        x = self.m_11(x)
        ys.append(x)
        x = x + ys[11]  # Residual add
        ys.append(x)
        x = self.m_13(x)
        ys.append(x)
        x = self.m_14(x)
        ys.append(x)
        x = self.m_15(x)
        ys.append(x)
        x = self.m_16(x)
        ys.append(x)
        x = self.m_17(x)
        ys.append(x)
        x = self.m_18(x)
        ys.append(x)
        x = x + ys[18]  # Residual add
        ys.append(x)
        x = self.m_20(x)
        ys.append(x)
        x = self.m_21(x)
        ys.append(x)
        x = self.m_22(x)
        ys.append(x)
        x = self.m_23(x)
        ys.append(x)
        x = self.m_24(x)
        ys.append(x)
        x = self.m_25(x)
        ys.append(x)
        x = x + ys[25]  # Residual add
        ys.append(x)
        x = self.m_27(x)
        ys.append(x)
        x = self.m_28(x)
        ys.append(x)
        x = self.m_29(x)
        ys.append(x)
        x = self.m_30(x)
        ys.append(x)
        x = self.m_31(x)
        ys.append(x)
        x = self.m_32(x)
        ys.append(x)
        x = self.m_33(x)
        ys.append(x)
        x = self.m_34(x)
        ys.append(x)
        x = self.m_35(x)
        ys.append(x)
        x = x + ys[35]  # Residual add
        ys.append(x)
        x = self.m_37(x)
        ys.append(x)
        x = torch.flatten(x, 1)
        x = self.m_38(x)
        ys.append(x)
        return x